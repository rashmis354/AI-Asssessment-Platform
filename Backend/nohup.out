 
 -------------- celery@vm-hex-tensai v5.4.0 (opalescent)
--- ***** ----- 
-- ******* ---- Linux-6.5.0-1024-azure-x86_64-with-glibc2.35 2024-11-26 07:03:39
- *** --- * --- 
- ** ---------- [config]
- ** ---------- .> app:         Tasks:0x742d60afe1d0
- ** ---------- .> transport:   redis://localhost:6379/0
- ** ---------- .> results:     redis://localhost:6379/0
- *** --- * --- .> concurrency: 10 (prefork)
-- ******* ---- .> task events: OFF (enable -E to monitor tasks in this worker)
--- ***** ----- 
 -------------- [queues]
                .> celery           exchange=celery(direct) key=celery
                

[tasks]
  . modules.tasks.celery_tasks.openai_celery_task

[2024-11-26 07:03:39,817: WARNING/MainProcess] /app/legalbot/legalbot_venv/lib/python3.10/site-packages/celery/worker/consumer/consumer.py:508: CPendingDeprecationWarning: The broker_connection_retry configuration setting will no longer determine
whether broker connection retries are made during startup in Celery 6.0 and above.
If you wish to retain the existing behavior for retrying connections on startup,
you should set broker_connection_retry_on_startup to True.
  warnings.warn(

[2024-11-26 07:03:39,828: INFO/MainProcess] Connected to redis://localhost:6379/0
[2024-11-26 07:03:39,829: WARNING/MainProcess] /app/legalbot/legalbot_venv/lib/python3.10/site-packages/celery/worker/consumer/consumer.py:508: CPendingDeprecationWarning: The broker_connection_retry configuration setting will no longer determine
whether broker connection retries are made during startup in Celery 6.0 and above.
If you wish to retain the existing behavior for retrying connections on startup,
you should set broker_connection_retry_on_startup to True.
  warnings.warn(

[2024-11-26 07:03:39,834: INFO/MainProcess] mingle: searching for neighbors
[2024-11-26 07:03:40,845: INFO/MainProcess] mingle: all alone
[2024-11-26 07:03:40,857: INFO/MainProcess] celery@vm-hex-tensai ready.
[2024-11-26 07:04:15,857: INFO/MainProcess] Task modules.tasks.celery_tasks.openai_celery_task[28473be9-8e19-42a6-b64d-9dcc254712c8] received
[2024-11-26 07:04:15,859: WARNING/ForkPoolWorker-6] open_ai_celery_task
[2024-11-26 07:04:15,859: INFO/MainProcess] Task modules.tasks.celery_tasks.openai_celery_task[f17a77ed-63ce-4256-bc8f-f8750104e4ee] received
[2024-11-26 07:04:15,861: WARNING/ForkPoolWorker-7] open_ai_celery_task
[2024-11-26 07:04:18,099: INFO/ForkPoolWorker-6] HTTP Request: POST https://oa-tmk-oth-dev1.openai.azure.com//openai/deployments/oam-tmk-oth-dev1-gpt4o/chat/completions?api-version=2024-04-01-preview "HTTP/1.1 200 OK"
[2024-11-26 07:04:18,113: INFO/ForkPoolWorker-6] Task modules.tasks.celery_tasks.openai_celery_task[28473be9-8e19-42a6-b64d-9dcc254712c8] succeeded in 2.254362827981822s: {'1': {'question': 'What is the correct syntax to output \'Hello, World!\' in Python?', 'options': ['echo \'Hello, World!\'', 'print(\'Hello, World!\')', 'printf(\'Hello, World!\')', 'cout << \'Hello, World!\''], 'answer': 'print(\'Hello, World!\')'}, '2': {'question': 'Which of the following is a correct variable declaration in Python?', 'options': ['int x = 10', 'x = 10', 'declare x = 10', 'var x = 10'], 'answer': 'x = 10'}}
[2024-11-26 07:04:30,650: INFO/ForkPoolWorker-7] HTTP Request: POST https://oa-tmk-oth-dev1.openai.azure.com//openai/deployments/oam-tmk-oth-dev1-gpt4o/chat/completions?api-version=2024-04-01-preview "HTTP/1.1 200 OK"
[2024-11-26 07:04:30,662: INFO/ForkPoolWorker-7] Task modules.tasks.celery_tasks.openai_celery_task[f17a77ed-63ce-4256-bc8f-f8750104e4ee] succeeded in 14.800885952019598s: {'questions': [{'question': 'Write a Python function that takes a list of integers and returns the sum of all the even numbers in the list.', 'testcases': {...}, 'solution': 'def sum_of_even_numbers(lst):
    return sum(num for num in lst if num % 2 == 0)

# Test cases
print(sum_of_even_numbers([1, 2, 3, 4, 5, 6]))  # Output: 12
print(sum_of_even_numbers([10, 15, 20, 25, 30]))  # Output: 60
print(sum_of_even_numbers([7, 8, 9, 10, 11]))  # Output: 18'}, {'question': 'Write a Python function that takes a string and returns the number of vowels in the string.', 'testcases': {...}, 'solution': 'def count_vowels(s):
    vowels = \'aeiouAEIOU\'
    return sum(1 for char in s if char in vowels)

# Test cases
print(count_vowels(\'hello world\'))  # Output: 3
print(count_vowels(\'python programming\'))  # Output: 4
print(count_vowels(\'aeiou\'))  # Output: 5'}]}
